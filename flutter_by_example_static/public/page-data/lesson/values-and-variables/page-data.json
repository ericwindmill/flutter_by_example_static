{"componentChunkName":"component---src-templates-lesson-post-js","path":"/lesson/values-and-variables","result":{"data":{"strapiLesson":{"id":"Lesson_11","author":{"email":"eric@ericwindmill.com","username":"Eric Windmill","twitter":"ericwindmill"},"content":"The basic building block of information in your Dart program will be variables. Anytime you're\n working with data in an app, you can store that data in variables.  For example, if you're\n  building a chat application, you can use variables to refer to chat messages or a user.\n  \nVariables store references to these _values_.\n  \n## Defining Variables\n\nOne of many ways, and the simplest way, to define a variable in Dart is using the `var` key word. \n\n```dart\nvar message = 'Hello, World';\n```\n\nThis example creates a variable called `message`, and also _initializes_ the variable with a\n String value of `Hello, World`. Now, you can access that value by referring to the `message\n ` variable.\n \n```dart\nvar message = 'Hello, World';\nprint(message);\n\n// => Hello, World\n```\n\n## Inferring the type\n\nDart is a _typed language_. The type of the variable `message` is String. Dart can infer this\n type, so you did't have to explicitly define it as a String. Importantly, this variable must be\n  a String forever. You cannot re-assign the variable as an integer. If you did want to create a\n   variable that's more dynamic, you'd use the `dynamic` keyword. We'll see examples of that in a later lesson.\n   \n```dart\ndynamic message = 'Hello World';\n```\n\nYou can safely re-assign this variable to an integer. \n\n```dart\ndynamic message = 'Hello, World';\nmessage = 8; \n```\n\n*NB*: It's rarely advisable to use `dynamic`. Your code will benefit from being type safe.  \n\n\n\n","updated_at":"Sunday, 12th of July, 2020","slug":"values-and-variables","strapiId":11,"title":"Values and variables","tutorial":{"category":"Dart","title":"Dart Fundamentals"}},"strapiTutorial":{"lessons":[{"author":1,"content":"The basic building block of information in your Dart program will be variables. Anytime you're\n working with data in an app, you can store that data in variables.  For example, if you're\n  building a chat application, you can use variables to refer to chat messages or a user.\n  \nVariables store references to these _values_.\n  \n## Defining Variables\n\nOne of many ways, and the simplest way, to define a variable in Dart is using the `var` key word. \n\n```dart\nvar message = 'Hello, World';\n```\n\nThis example creates a variable called `message`, and also _initializes_ the variable with a\n String value of `Hello, World`. Now, you can access that value by referring to the `message\n ` variable.\n \n```dart\nvar message = 'Hello, World';\nprint(message);\n\n// => Hello, World\n```\n\n## Inferring the type\n\nDart is a _typed language_. The type of the variable `message` is String. Dart can infer this\n type, so you did't have to explicitly define it as a String. Importantly, this variable must be\n  a String forever. You cannot re-assign the variable as an integer. If you did want to create a\n   variable that's more dynamic, you'd use the `dynamic` keyword. We'll see examples of that in a later lesson.\n   \n```dart\ndynamic message = 'Hello World';\n```\n\nYou can safely re-assign this variable to an integer. \n\n```dart\ndynamic message = 'Hello, World';\nmessage = 8; \n```\n\n*NB*: It's rarely advisable to use `dynamic`. Your code will benefit from being type safe.  \n\n\n\n","created_at":"2020-07-12T16:35:51.910Z","id":11,"slug":"values-and-variables","title":"Values and variables","tutorial":2,"updated_at":"2020-07-12T16:35:51.919Z"},{"author":1,"content":"Dart supports three kinds of comments:\n\n```dart\n// Inline comments\n\n/*\nBlocks of comments. It's not convention to use block comments in Dart.\n*/\n\n/// Documentation\n///\n/// This is what you should use to document your classes.\n```\n\nGenerally, documentation comments with three slashes are used for documenting your code. Anything you think will stay in the code forever should use this style of comments. Inline comments are used for brief insights into something on a specific line.\n","created_at":"2020-07-12T16:36:15.220Z","id":12,"slug":"comments","title":"Comments","tutorial":2,"updated_at":"2020-07-12T16:36:15.230Z"}]}},"pageContext":{"slug":"values-and-variables","tutorialTitle":"Dart Fundamentals","previous":null,"next":{"author":1,"content":"Dart supports three kinds of comments:\n\n```dart\n// Inline comments\n\n/*\nBlocks of comments. It's not convention to use block comments in Dart.\n*/\n\n/// Documentation\n///\n/// This is what you should use to document your classes.\n```\n\nGenerally, documentation comments with three slashes are used for documenting your code. Anything you think will stay in the code forever should use this style of comments. Inline comments are used for brief insights into something on a specific line.\n","created_at":"2020-07-12T16:36:15.220Z","id":12,"slug":"comments","title":"Comments","tutorial":2,"updated_at":"2020-07-12T16:36:15.230Z"}}}}